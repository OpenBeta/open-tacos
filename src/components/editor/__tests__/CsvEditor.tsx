import React from 'react'
import '@testing-library/jest-dom/extend-expect'
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import CSVEditor from '../CsvEditor'
import { CSVFormHelper } from './FormHelper'
import { EditableClimbType } from '../../crag/cragSummary'

describe('Inplace CSV editor tests', () => {
  const initialClimbs: EditableClimbType[] = [
    {
      id: '68003e52-4c6c-4051-bd3e-349dbebc3205',
      climbId: '68003e52-4c6c-4051-bd3e-349dbebc3205',
      name: 'Apple',
      yds: '',
      leftRightIndex: 0
    },
    {
      id: '1832abf4-e73b-41b0-a650-c629694929d7',
      climbId: '1832abf4-e73b-41b0-a650-c629694929d7',
      name: 'Grape',
      yds: '',
      leftRightIndex: 1
    }
  ]

  /**
   * Render editor with a list of climbs and submit
   * Verify submit handler data
   */
  test('CSV Editor rendering default climb list', async () => {
    const user = userEvent.setup()
    const submitHandlerFn = jest.fn()

    render(
      <CSVFormHelper initialClimbs={initialClimbs} submitHandler={submitHandlerFn}>
        <CSVEditor
          name='climbs'
          editable={false}
          initialClimbs={initialClimbs}
          resetSignal={0}
        />
      </CSVFormHelper>)

    const editor = screen.getByRole('textbox')

    // Verify climb list
    const expected = new RegExp('^' + initialClimbs[0].climbId + '\\s*\\|\\s' + initialClimbs[0].name +
      initialClimbs[1].climbId + '\\s\\|\\s' + initialClimbs[1].name + '$'
    )
    expect(editor).toHaveTextContent(expected)

    // Submit form
    await user.click(screen.getByRole('button', { name: 'Submit' }))

    expect(submitHandlerFn).toHaveBeenCalledTimes(1)

    const functionArg = submitHandlerFn.mock.calls[0][0]
    expect(functionArg).toMatchObject(expect.objectContaining({ climbs: initialClimbs }))
  })

  /**
   * Simulate user correcting a climb name.  For some reason new lines
   * generated by {Enter} keys aren't wrapped in correct Html tags so
   * we can't test adding new climbs scenario.
   */
  test('Simulate a climb name change', async () => {
    const user = userEvent.setup()
    const submitHandlerFn = jest.fn()
    submitHandlerFn.mockClear()
    render(
      <CSVFormHelper initialClimbs={initialClimbs} submitHandler={submitHandlerFn}>
        <CSVEditor
          name='climbs'
          editable={false}
          initialClimbs={initialClimbs}
          resetSignal={0}
        />
      </CSVFormHelper>)

    const editor = screen.getByRole('textbox')

    await user.click(editor)

    await user.type(editor, '{Backspace>5/}Melon' + '  ') // backspace 5x and some blank spaces

    // Submit form
    await user.click(screen.getByRole('button', { name: 'Submit' }))

    expect(submitHandlerFn).toHaveBeenCalledTimes(1)

    const actual = submitHandlerFn.mock.calls[0][0]
    const actualClimbs = actual.climbs

    expect(actualClimbs[0].name).toEqual(initialClimbs[0].name)
    expect(actualClimbs[1].name).toEqual('Melon')
  })
})
