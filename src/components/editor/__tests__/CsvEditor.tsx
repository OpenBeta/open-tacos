import React from 'react'
import '@testing-library/jest-dom/extend-expect'
import { render, screen } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import CSVEditor from '../CsvEditor'
import { CSVFormHelper } from './FormHelper'
import { EditableClimbType } from '../../crag/cragSummary'
import { GradeHelper } from '../../../js/grades/Grade'
import { individualClimbToTokenDelimitedStr } from '../plugins/CsvResetPlugin'

xdescribe('Inplace CSV editor tests', () => {
  const initialClimbs: EditableClimbType[] = [
    {
      id: '68003e52-4c6c-4051-bd3e-349dbebc3205',
      climbId: '68003e52-4c6c-4051-bd3e-349dbebc3205',
      name: 'Apple',
      gradeStr: '8b',
      leftRightIndex: 0,
      disciplines: {
        sport: true
      }
    },
    {
      id: '1832abf4-e73b-41b0-a650-c629694929d7',
      climbId: '1832abf4-e73b-41b0-a650-c629694929d7',
      name: 'Grape',
      gradeStr: '5c',
      disciplines: {
        trad: true
      },
      leftRightIndex: 1
    }
  ]

  const frenchGradeHelper = new GradeHelper('FR', false)

  /**
   * Render editor with a list of climbs and submit
   * Verify submit handler data
   */
  test('CSV Editor rendering default climb list', async () => {
    const user = userEvent.setup()
    const submitHandlerFn = jest.fn()

    render(
      <CSVFormHelper initialClimbs={initialClimbs} submitHandler={submitHandlerFn}>
        <CSVEditor
          name='climbs'
          editable={false}
          initialClimbs={initialClimbs}
          resetSignal={0}
          gradeHelper={frenchGradeHelper}
        />
      </CSVFormHelper>)

    const editor = screen.getByRole('textbox')

    const actuals: string[] = []
    editor.querySelectorAll('p').forEach(node => {
      actuals.push(node.textContent ?? '')
    })

    expect(actuals).toHaveLength(initialClimbs.length)

    actuals.forEach((actualClimb, index) =>
      expect(actualClimb).toEqual(individualClimbToTokenDelimitedStr(initialClimbs[index]))
    )

    // Submit form
    await user.click(screen.getByRole('button', { name: 'Submit' }))

    expect(submitHandlerFn).toHaveBeenCalledTimes(1)

    const functionArg = submitHandlerFn.mock.calls[0][0]
    expect(functionArg).toMatchObject(expect.objectContaining({ climbs: initialClimbs }))
  })

  /**
   * Simulate user correcting a climb.  For some reason new lines
   * generated by {Enter} keys aren't wrapped in correct Html tags so
   * we can't test adding new climbs scenario.
   */
  test('Simulate a grade change & grade validation', async () => {
    const user = userEvent.setup()
    const submitHandlerFn = jest.fn()
    submitHandlerFn.mockClear()
    render(
      <CSVFormHelper initialClimbs={initialClimbs} submitHandler={submitHandlerFn}>
        <CSVEditor
          name='climbs'
          editable={false}
          initialClimbs={initialClimbs}
          resetSignal={0}
          gradeHelper={frenchGradeHelper}
        />
      </CSVFormHelper>)

    const editor = screen.getByRole('textbox')

    await user.click(editor) // the cursor will be at the end of the last line

    await user.type(editor, '{arrowleft>4}{backspace}f') // Change a grade '5f'

    screen.queryByText('Please fix formatting errors')

    expect(await (screen.findByRole('button', { name: 'Submit' }))).toBeDisabled()

    await user.type(editor, '{arrowleft>4}{backspace}b') // Change a grade to '5b'

    // Submit form
    await user.click(screen.getByRole('button', { name: 'Submit' }))

    expect(submitHandlerFn).toHaveBeenCalledTimes(1)

    const actual = submitHandlerFn.mock.calls[0][0]
    const actualClimbs = actual.climbs as EditableClimbType[]

    expect(actualClimbs[1].gradeStr).toEqual('5b')
  })
})
